var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SMLMFrameConnection","category":"page"},{"location":"#SMLMFrameConnection","page":"Home","title":"SMLMFrameConnection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SMLMFrameConnection.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SMLMFrameConnection]","category":"page"},{"location":"#SMLMFrameConnection.ParamStruct","page":"Home","title":"SMLMFrameConnection.ParamStruct","text":"ParamStruct(initialdensity::Vector{Float64}, \n    k_on::Float64, k_off::Float64, k_bleach::Float64, p_miss::Float64, \n    nsigmadev::Float64, maxframegap::Int, nnearestclusters::Int)\n\nStructure of parameters needed for frame-connection.\n\nFields\n\n-initialdensity: Density of emitters at the start of the experiment.                    (see estimatedensities()) (emitters/pixel^2) -nnearestclusters: Number of nearest preclusters used for local density                       estimates. (default = 2)(see estimatedensities()) -k_on: Rate at which dark emitters convert to the visible state.           (see estimateparams())(1/frame) -k_off: Rate at which visible emitters are converted to the reversible dark           state. (see estimateparams())(1/frame) -k_bleach: Rate at which visible emitters are irreversibly photobleached.              (see estimateparams())(1/frame) -p_miss: Probability of missing a localization of a visible emitter. -nsigmadev: Multiplier of localization errors that defines a pre-clustering               distance threshold. (default = 5)(see precluster())(pixels) -maxframegap: Maximum frame gap between temporally adjacent localizations in                 a precluster. (default = 5)(see precluster())(frames) -nmaxnn: Maximum number of nearest-neighbors inspected for precluster             membership.  Ideally, this would be set to inf, but that's not            feasible for most data. (default = 2)(see precluster())\n\n\n\n\n\n","category":"type"},{"location":"#SMLMFrameConnection.combinelocalizations-Tuple{SMLMData.SMLD2D}","page":"Home","title":"SMLMFrameConnection.combinelocalizations","text":"smld_combined = combinelocalizations(smld::SMLMData.SMLD2D)\n\nCombine clustered localizations in smld into higher precision localizations.\n\nDescription\n\nThis function combines localizations in smld that share the same value of smld.connectID.  Localizations are combined assuming they arose from  independent measurements of the same position with Gaussian errors.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.compress_connectID!-Tuple{Vector{Int64}}","page":"Home","title":"SMLMFrameConnection.compress_connectID!","text":"compress_connectID!(connectID::Vector{Int32})\n\nMake connectID consists of the set of integers 1:length(unique(connectID))`\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.compress_connectID-Tuple{Vector{Int64}}","page":"Home","title":"SMLMFrameConnection.compress_connectID","text":"connectID = compress_connectID(connectID::Vector{Int32})\n\nMake connectID consists of the set of integers 1:length(unique(connectID))`\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.computeclusterinfo-Tuple{Vector{Matrix{Float32}}}","page":"Home","title":"SMLMFrameConnection.computeclusterinfo","text":"clusterdurations, nobservations = \n    computeclusterinfo(clusterdata::Vector{Matrix{Float32}})\n\nCompute the durations of and number of member localizations in clusters.\n\nDescription\n\nThis method computes the duration of each cluster and the number of localizations in each cluster present in the input clusterdata.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.connect1DS!-Tuple{SMLMData.SMLD2D, Int64}","page":"Home","title":"SMLMFrameConnection.connect1DS!","text":"connect1DS!(smld::SMLMData.SMLD2D, dataset::Int; maxframegap::Int = 5)\n\nDefine the \"ideal\" frame-connection result for simulated smld with one dataset.\n\nDescription\n\nThis is a helper function which defines the ideal FC result for a single  dataset.  The user should probably not bother using this, and instead should call defineidealFC().\n\nInputs\n\n-smld: SMLMData.SMLD2D with smld.connectID populated to indicate emitter ID. -dataset: Dataset number to be connected. -maxframegap: Maximum frame gap allowed between localizations connected in                 the \"ideal\" result.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.connectlocalizations!-Tuple{Vector{Int64}, Vector{Matrix{Float32}}, SMLMFrameConnection.ParamStruct, Int64}","page":"Home","title":"SMLMFrameConnection.connectlocalizations!","text":"connectlocalizations!(connectID::Vector{Int64}, \n    clusterdata::Vector{Matrix{Float32}}, \n    params::ParamStruct, nframes::Int64)\n\nConnect localizations in clusterdata by solving a linear assignment problem.\n\nDescription\n\nConnect localizations in clusterdata by giving \"connected\" localizations the same integer value for their field smd.connectID.  Associations are made by solving a linear assignment problem which designates the ideal connections between localizations.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.connectlocalizations-Tuple{Vector{Int64}, Vector{Matrix{Float32}}, SMLMFrameConnection.ParamStruct, Int64}","page":"Home","title":"SMLMFrameConnection.connectlocalizations","text":"connectID = connectlocalizations(connectID::Vector{Int64}, \n    clusterdata::Vector{Matrix{Float32}}, \n    params::ParamStruct, nframes::Int64)\n\nConnect localizations in clusterdata by solving a linear assignment problem.\n\nDescription\n\nConnect localizations in clusterdata by giving \"connected\" localizations the same integer value for their field smd.connectID.  Associations are made by solving a linear assignment problem which designates the ideal connections between localizations.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.create_costmatrix-Tuple{Vector{Matrix{Float32}}, SMLMFrameConnection.ParamStruct, Int64, Int64}","page":"Home","title":"SMLMFrameConnection.create_costmatrix","text":"costmatrix = create_costmatrix(clusterdata::Vector{Matrix{Float32}}, \n    params::ParamStruct, nframes::Int64)\n\nCreate a cost matrix for connections between localizations in clusterdata.\n\nDescription\n\nThe costs associated with connecting/not connecting the localizations in the input set of data in clusterdata are placed in entries of the output matrix costmatrix.  For N localizations in clusterdata, the output costmatrix will be an 2Nx2N block matrix.  The NxN blocks are attributed the following meanings: the upper-left \"connection\" block corresponds to adding localizations to existing clusters of other localizations, the bottom-left \"birth\" block  corresponds to introduction of a new cluster, and the upper-right \"death\" block corresponds to preventing admission of any more localizations to a cluster. The bottom-right \"auxillary\" block is the transpose of the \"connection\" block. Forbidden connections are indicated by missing.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.defineidealFC!-Tuple{SMLMData.SMLD2D}","page":"Home","title":"SMLMFrameConnection.defineidealFC!","text":"smld, smld_combined = defineidealFC!(smld::SMLMData.SMLD2D; \n    maxframegap::Int = 5)\n\nDefine the \"ideal\" frame-connection result for a simulated smld.\n\nDescription\n\nThis function defines the \"ideal\" frame connection result from a simulation. That is to say, for a simulated SMLD2D structure smld with connectID field populated to indicate emitter membership of localizations, this function will generate an \"ideal\" FC result which combines all blinking events that appeared with frame gaps less than maxframegap of one another.  Note that for very high duty cycles, multiple blinking events might be mistakingly combined by this method (i.e., if the emitter blinks back on within maxframegap frames of its previous blink).  Note that localizations are not allowed to be  connected across datasets.\n\nInputs\n\n-smld: SMLMData.SMLD2D with smld.connectID populated to indicate emitter ID. -maxframegap: Maximum frame gap allowed between localizations connected in                 the \"ideal\" result.\n\nOutputs\n\n-smld_out: Ideal frame-connection result on input smld with localizations              combined as appropriate. -smld_connected: Copy of the input smld with smldconnected.connectID                     modified to reflect blinking event ID (i.e., `smldout` is                    generated as smldout = combinelocalizations(smldconnected))\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.estimatedensities-Tuple{SMLMData.SMLD2D, Vector{Matrix{Float32}}, SMLMFrameConnection.ParamStruct}","page":"Home","title":"SMLMFrameConnection.estimatedensities","text":"initialdensity = estimatedensities(smld::SMLMData.SMLD2D, \n    clusterdata::Vector{Matrix{Float32}}, params::ParamStruct)\n\nEstimate local emitter densities for clusters in smld and clusterdata.\n\nDescription\n\nThe initial local densities initialdensity around each pre-cluster present in smld/clusterdata are estimated based on the local density of pre-clusters throughout the entire set of data as well as some of the rate parameters  provided in params.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.estimateparams-Tuple{SMLMData.SMLD2D, Vector{Matrix{Float32}}}","page":"Home","title":"SMLMFrameConnection.estimateparams","text":"k_on, k_off, k_bleach, p_miss, nemitters = \n    estimateparams(smld::SMLMData.SMLD2D, clusterdata::Vector{Matrix{Float32}})\n\nEstimate rate parameters from the clusters in smld and clusterdata.\n\nDescription\n\nThe rate parameters k_on, k_off, and k_bleach, the probability of missing a localization for a visible emitter p_miss, and the underlying number of emitters nemitters are estimated from the pre-clusters in  smld/clusterdata.  This is done by assuming that pre-clusters are, on  average, representative of a single blinking event of a single emitter.\n\nCitation\n\nSchodt David J., Lidke Keith A., \"Spatiotemporal Clustering of Repeated  Super-Resolution Localizations via Linear Assignment Problem\",  Front. Bioinform., 20 October 2021 https://doi.org/10.3389/fbinf.2021.724325\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.frameconnect!-Tuple{SMLMData.SMLD2D}","page":"Home","title":"SMLMFrameConnection.frameconnect!","text":"smld, smld_preclustered, smld_combined, params = frameconnect!(smld::SMLMData.SMLD2D; \n    nnearestclusters::Int=2, nsigmadev::Float64=5.0, maxframegap::Int=5, nmaxnn::Int=2)\n\nConnect repeated localizations of the same emitter in smld.\n\nDescription\n\nRepeated localizations of the same emitter present in smld are connected and combined into higher precision localizations of that emitter.  This is done by\n\nforming pre-clusters of localizations, 2) estimating rate parameters from\n\nthe pre-clusters, 3) solving a linear assignment problem for connecting  localizations in each pre-cluster, and 4) combining the connected localizations using their MLE position estimate assuming Gaussian noise.\n\nInputs\n\n-smld: SMLD2D structure containing the localizations that should be           connected (see SMLMData.SMLD2D for organization/fields). -nnearestclusters: Number of nearest preclusters used for local density                       estimates. (default = 2)(see estimatedensities()) -nsigmadev: Multiplier of localization errors that defines a pre-clustering               distance threshold. (default = 5)(see precluster())(pixels) -maxframegap: Maximum frame gap between temporally adjacent localizations in                 a precluster. (default = 5)(see precluster())(frames) -nmaxnn: Maximum number of nearest-neighbors inspected for precluster             membership.  Ideally, this would be set to inf, but that's not            feasible for most data. (default = 2)(see precluster())\n\nOutputs\n\n-smld: Input smld with field connectID updated to reflect connected          localizations (however localizations remain uncombined). -smld_preclustered: Copy of the input smld with the field connectID                       populated to reflect the results of pre-clustering. -smld_combined: Final frame-connection result (i.e., smld with                    localizations that seem to be from the same blinking event                   combined into higher precision localizations). -params: Structure of parameters used in the algorithm, with some copied             directly from the option kwargs to this function, and others             calculated internally (see SMLMFrameConnection.ParamStruct).\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.frameconnect-Tuple{SMLMData.SMLD2D}","page":"Home","title":"SMLMFrameConnection.frameconnect","text":"smld, smld_preclustered, smld_combined, params = frameconnect(smld::SMLMData.SMLD2D; \n    nnearestclusters::Int=2, nsigmadev::Float64=5.0, maxframegap::Int=5, nmaxnn::Int=2)\n\nConnect repeated localizations of the same emitter in smld.\n\nDescription\n\nRepeated localizations of the same emitter present in smld are connected and combined into higher precision localizations of that emitter.  This is done by\n\nforming pre-clusters of localizations, 2) estimating rate parameters from\n\nthe pre-clusters, 3) solving a linear assignment problem for connecting  localizations in each pre-cluster, and 4) combining the connected localizations using their MLE position estimate assuming Gaussian noise.\n\nInputs\n\n-smld: SMLD2D structure containing the localizations that should be           connected (see SMLMData.SMLD2D for organization/fields). -nnearestclusters: Number of nearest preclusters used for local density                       estimates. (default = 2)(see estimatedensities()) -nsigmadev: Multiplier of localization errors that defines a pre-clustering               distance threshold. (default = 5)(see precluster())(pixels) -maxframegap: Maximum frame gap between temporally adjacent localizations in                 a precluster. (default = 5)(see precluster())(frames) -nmaxnn: Maximum number of nearest-neighbors inspected for precluster             membership.  Ideally, this would be set to inf, but that's not            feasible for most data. (default = 2)(see precluster())\n\nOutputs\n\n-smld: Input smld with field connectID updated to reflect connected          localizations (however localizations remain uncombined). -smld_preclustered: Copy of the input smld with the field connectID                       populated to reflect the results of pre-clustering. -smld_combined: Final frame-connection result (i.e., smld with                    localizations that seem to be from the same blinking event                   combined into higher precision localizations). -params: Structure of parameters used in the algorithm, with some copied             directly from the option kwargs to this function, and others             calculated internally (see SMLMFrameConnection.ParamStruct).\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.linkclusters!-Tuple{Vector{Int64}, Int64, Union{Int64, Vector{Int64}}, Vector{Int64}}","page":"Home","title":"SMLMFrameConnection.linkclusters!","text":"connectID, maxconnectID = linkclusters!(connectID::Int64, \n    maxconnectID::Int64, updateind::Vector{Int64}, \n    assignment::Vector{Int64})\n\nForce localizations linked by assignment to share same the same connectID\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.linkclusters-Tuple{Vector{Int64}, Int64, Union{Int64, Vector{Int64}}, Vector{Int64}}","page":"Home","title":"SMLMFrameConnection.linkclusters","text":"connectID, maxconnectID = linkclusters(\n    connectID::Int64, maxconnectID::Int64, \n    updateind::Vector{Int64}, assignment::Vector{Int64})\n\nForce localizations linked by assignment to share same the same connectID\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.organizeclusters-Tuple{SMLMData.SMLD2D}","page":"Home","title":"SMLMFrameConnection.organizeclusters","text":"clusterdata = organizeclusters(smld::SMLMData.SMLD2D)\n\nOrganize pre-clusters into a vector indexing distinct clusters.\n\nDescription\n\nPre-clusters in the input smld, as related by their shared integer value k_off smld.connectID, are organized into a vector of matrices clusterdata.  Each index of clusterdata corresponds to a distinct cluster.\n\n\n\n\n\n","category":"method"},{"location":"#SMLMFrameConnection.precluster","page":"Home","title":"SMLMFrameConnection.precluster","text":"smld_preclustered = precluster(smld::SMLMData.SMLD2D, \n    params::ParamStruct = ParamStruct())\n\nCluster localizations in smld based on distance and time thresholds in params.\n\nDescription\n\nLocalizations in the input structure smd are clustered together based on their spatiotemporal separations.  All localizations within a spatial  threshold of params.nsigmadev*mean([smld.σ_x smld.σ_y) and a temporal  threshold of params.maxframegap of one another will be clustered together, meaning that these localizations now share the same unique integer value for smld.connectID.\n\nNotes\n\nPre-clustering allows localizations observed in the same frame to be in the same cluster.  This is done to prevent exclusion of the \"correct\" localization from its ideal cluster due to a previously included \"incorrect\" localization into that cluster.\n\n\n\n\n\n","category":"function"},{"location":"#SMLMFrameConnection.solveLAP-Tuple{Matrix{Float32}}","page":"Home","title":"SMLMFrameConnection.solveLAP","text":"assignment, cost = solveLAP(costmatrix::Matrix{Float32})\n\nSolve the linear assignment problem designated by costmatrix.\n\nDescription\n\nSolve the linear assignment problem (LAP) defined by costmatrix using the package Hungarian.jl.  For now, this method is just a wrapper around  Hungarian.jl, however the intention is to add more checks and options to this method in the future.\n\n\n\n\n\n","category":"method"}]
}
